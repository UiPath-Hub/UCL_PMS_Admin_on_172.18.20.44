{
  "backgroundColor": "",
  "borderColor": "#e0dede",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 34,
  "bottomRowBeforeCollapse": 42,
  "boxShadow": "none",
  "defaultModel": "{{\n{\n\"items\":MSelect_Roles_G2.selectedOptionLabels.map((item,i)=>({key:i,value:item})),\n\t\"fontSize\":13\n}\n}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultModel"
    },
    {
      "key": "isVisible"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [
    {
      "key": "isVisible"
    }
  ],
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": "{{!MSelect_Roles_G2.isVisible}}",
  "key": "pw9ip79xc5",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 30,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 12,
  "mobileTopRow": 0,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 42,
  "originalTopRow": 32,
  "parentColumnSpace": 4.375,
  "parentId": "ojzzpjcro8",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": ":root {\n  font-family: \"Nunito Sans\";\n}\n\n.items-box-container {\n  padding: 3px 3px;\n  width: 100%;\n  min-height: 68px;\n  box-sizing: border-box;\n}\n\n.items-box-inner {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  align-items: flex-start;\n}\n\n.items-input {\n  outline: none;\n  border: 1px solid #e2e2e2;\n  border-radius: 16px;\n  min-width: 96px;\n  margin-right: 8px;\n  margin-left: 8px;\n  box-sizing: border-box;\n}\n.items-input button {\n  background: none;\n  border: none;\n  color: #c24447;\n  cursor: pointer;\n  margin-left: 4px;\n  margin-right: 8px;\n  font-size: 16px;\n  padding: 0;\n  line-height: 1;\n}\n.items-input input {\n  border: 0px;\n  border-top-left-radius: 16px;\n  border-bottom-left-radius: 16px;\n  padding: 7px 12px;\n  font-size: 13px;\n}\n\n.item-chip {\n  display: flex;\n  align-items: center;\n  background: #ffffff;\n  color: var(--appsmith-theme-fontColor);\n  border: 1px solid rgba(17, 17, 17, 0.0666666667);\n  border-radius: 8px;\n  padding: 6px 12px 6px 10px;\n  font-size: calc(var(--appsmith-model-fontSize) * 1px);\n  position: relative;\n  margin: 0 4px 4px 0;\n  white-space: nowrap;\n}\n\n.item-remove {\n  background: none;\n  border: none;\n  color: #c24447;\n  cursor: pointer;\n  margin-left: 4px;\n  font-size: 16px;\n  padding: 0;\n  line-height: 1;\n}\n\n.item-chip:last-child {\n  margin-right: 0;\n}",
    "html": "<style>\n@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;700&display=swap');\n</style>\n<div class=\"items-box-container\">\n  <div id=\"root\"></div>\n</div>",
    "js": "import React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\nfunction ItemsBox() {\n  // Fallback mock data for initial state\n  const mockItems = [{\n    key: 0,\n    value: \"item1\"\n  }, {\n    key: 1,\n    value: \"item2\"\n  }, {\n    key: 2,\n    value: \"item3\"\n  }];\n  // Load from model or fallback\n  const [items, setItems] = React.useState(appsmith.model.items || mockItems);\n  const [input, setInput] = React.useState(appsmith.model.inputName || \"\");\n\n  // Listen to Appsmith model updates\n  React.useEffect(() => {\n    appsmith.onModelChange(model => {\n      if (model.items) setItems(model.items);\n      if (typeof model.inputName === \"string\") setInput(model.inputName);\n    });\n  }, []);\n\n  // Handle input change\n  const handleInputChange = e => {\n    const val = e.target.value;\n    setInput(val);\n    appsmith.updateModel && appsmith.updateModel({\n      inputName: val\n    });\n  };\n\n  // Add input as new item (if not empty and not duplicate)\n  const handleInputAdd = e => {\n    const tag = e.currentTarget.tagName;\n    if (tag == \"input\" && e.type === \"keydown\" && e.key === \"Enter\" || tag == \"button\" && e.type === \"click\") {\n      if (input.trim()) {\n        if (!items.includes(input.trim())) {\n          const newItems = [...items, input.trim()];\n          setItems(newItems);\n          appsmith.updateModel && appsmith.updateModel({\n            items: newItems,\n            inputName: \"\"\n          });\n          setInput(\"\");\n          appsmith.triggerEvent && appsmith.triggerEvent(\"onItemAdd\", input.trim());\n        }\n      }\n    }\n  };\n\n  // Remove an item\n  const handleRemoveItem = React.useCallback(idx => {\n    const removeVal = items[idx];\n    const newItems = items.filter((_, i) => i !== idx);\n    setItems(newItems);\n    appsmith.updateModel && appsmith.updateModel({\n      items: newItems\n    });\n    appsmith.triggerEvent && appsmith.triggerEvent(\"onItemRemove\", removeVal);\n  }, [items]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"items-box-inner\"\n  }, items.map((item, idx) => /*#__PURE__*/React.createElement(\"span\", {\n    className: \"item-chip\",\n    key: item + idx\n  }, item.value)));\n}\nappsmith.onReady(() => {\n  ReactDOM.render(/*#__PURE__*/React.createElement(ItemsBox, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 24,
  "topRowBeforeCollapse": 32,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ":root {\n  font-family: \"Nunito Sans\";\n}\n.items-box-container {\n  padding: 3px 3px;\n  width: 100%;\n  min-height: 68px;\n  box-sizing: border-box;\n}\n.items-box-inner {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  align-items: flex-start;\n}\n.items-input {\n  outline: none;\n  border: 1px solid #e2e2e2;\n  border-radius: 16px;\n  min-width: 96px;\n  margin-right: 8px;\n\tmargin-left: 8px;\n  box-sizing: border-box;\n\tbutton{\n\t\tbackground: none;\n\t\tborder: none;\n\t\tcolor: #c24447;\n\t\tcursor: pointer;\n\t\tmargin-left: 4px;\n\t\tmargin-right: 8px;\n\t\tfont-size: 16px;\n\t\tpadding: 0;\n\t\tline-height: 1;\n\t}\n\tinput {\n\t\tborder: 0px;\n\t\tborder-top-left-radius: 16px;\n\t\tborder-bottom-left-radius: 16px;\n\t\tpadding: 7px 12px;\n\t\tfont-size: 13px;\n\t}\n}\n.item-chip {\n  display: flex;\n  align-items: center;\n  background: #ffffff;\n  color: var(--appsmith-theme-fontColor);\n\tborder: 1px solid #11111111;\n  border-radius: 8px;\n  padding: 6px 12px 6px 10px;\n  font-size: calc(var(--appsmith-model-fontSize) * 1px);\n  position: relative;\n  margin: 0 4px 4px 0;\n  white-space: nowrap;\n}\n.item-remove {\n  background: none;\n  border: none;\n  color: #c24447;\n  cursor: pointer;\n  margin-left: 4px;\n  font-size: 16px;\n  padding: 0;\n  line-height: 1;\n}\n.item-chip:last-child {\n  margin-right: 0;\n}\n",
    "html": "<style>\n@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;700&display=swap');\n</style>\n<div class=\"items-box-container\">\n  <div id=\"root\"></div>\n</div>",
    "js": "import React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\nfunction ItemsBox() {\n  // Fallback mock data for initial state\n  const mockItems = [\n    {key:0,value:\"item1\"},\n    {key:1,value:\"item2\"},\n    {key:2,value:\"item3\"}\n  ];\n  // Load from model or fallback\n  const [items, setItems] = React.useState(appsmith.model.items || mockItems);\n  const [input, setInput] = React.useState(appsmith.model.inputName || \"\");\n\n  // Listen to Appsmith model updates\n  React.useEffect(() => {\n    appsmith.onModelChange((model) => {\n      if (model.items) setItems(model.items);\n      if (typeof model.inputName === \"string\") setInput(model.inputName);\n    });\n  }, []);\n\n  // Handle input change\n  const handleInputChange = (e) => {\n    const val = e.target.value;\n    setInput(val);\n    appsmith.updateModel && appsmith.updateModel({ inputName: val });\n  };\n\n  // Add input as new item (if not empty and not duplicate)\n  const handleInputAdd = (e) => {\n\t\tconst tag = e.currentTarget.tagName;\n\t\tif ((tag==\"input\" && e.type === \"keydown\" && e.key === \"Enter\")||(tag==\"button\" && e.type === \"click\")){\n\t\t\tif (input.trim()) {\n\t\t\t\tif (!items.includes(input.trim())) {\n\t\t\t\t\tconst newItems = [...items, input.trim()];\n\t\t\t\t\tsetItems(newItems);\n\t\t\t\t\tappsmith.updateModel && appsmith.updateModel({ items: newItems, inputName: \"\" });\n\t\t\t\t\tsetInput(\"\");\n\t\t\t\t\tappsmith.triggerEvent && appsmith.triggerEvent(\"onItemAdd\", input.trim());\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\n  };\n\n  // Remove an item\n  const handleRemoveItem = React.useCallback(\n    (idx) => {\n      const removeVal = items[idx];\n      const newItems = items.filter((_, i) => i !== idx);\n      setItems(newItems);\n      appsmith.updateModel && appsmith.updateModel({ items: newItems });\n      appsmith.triggerEvent && appsmith.triggerEvent(\"onItemRemove\", removeVal);\n    },\n    [items]\n  );\n\n  return (\n\t\t\n    <div className=\"items-box-inner\">\n      {items.map((item, idx) => (\n        <span className=\"item-chip\" key={item + idx}>\n          {item.value}\n        </span>\n      ))}\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  ReactDOM.render(<ItemsBox />, document.getElementById(\"root\"));\n});\n"
  },
  "version": 1,
  "widgetId": "p6ooesp761",
  "widgetName": "Display_item"
}