{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#e0dede",
  "borderRadius": "0px",
  "borderWidth": "0",
  "bottomRow": 66,
  "boxShadow": "none",
  "defaultModel": "{{\n{ data:appsmith.store.ManageSelectList}\n}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "onSave"
    },
    {
      "key": "onAlert"
    }
  ],
  "events": [
    "onSave",
    "onAlert"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "r9zkt3u391",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 38,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 7.000000000000001,
  "mobileTopRow": 8,
  "needsErrorInfo": false,
  "onAlert": "{{showAlert(text,\"error\")}}",
  "onSave": "{{JS_MASTER.update(items);}}",
  "originalBottomRow": 66,
  "originalTopRow": 20,
  "parentColumnSpace": 19.0796875,
  "parentId": "oizzqpt6b8",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "@charset \"UTF-8\";\n@keyframes shake {\n  0% {\n    transform: translateX(0);\n  }\n  25% {\n    transform: translateX(-5px);\n  }\n  50% {\n    transform: translateX(5px);\n  }\n  75% {\n    transform: translateX(-5px);\n  }\n  100% {\n    transform: translateX(0);\n  }\n}\n.app {\n  width: calc(1px * var(--appsmith-ui-width) - 12px);\n  justify-content: space-between;\n  border-radius: 0px;\n  border-width: none;\n  padding: 5px;\n  height: calc(1px * var(--appsmith-ui-height) - 12px);\n  display: flex;\n  flex-direction: column;\n  overflow-x: hidden;\n}\n.app .itemParent {\n  border-width: 0px;\n  flex-direction: column;\n  overflow: auto;\n  height: 100%;\n  padding: 0px 15px 60px 15px;\n}\n.app .itemParent .shake {\n  animation: shake 0.5s;\n}\n.app .itemParent .Grid {\n  width: 100%;\n  height: 45px;\n  padding: 0px;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  margin-top: 5px;\n  border-radius: 5px;\n}\n.app .itemParent .Grid .rows {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  align-items: center;\n  gap: 20px;\n  height: 100%;\n}\n.app .itemParent .Grid .rows .input-group {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n.app .itemParent .Grid .rows .icon-container {\n  display: flex;\n  height: 100%;\n  min-height: 30px;\n  width: 20px;\n  align-items: center;\n  padding-left: 10px;\n  padding-right: 10px;\n  position: relative;\n  /*cursor: pointer;*/\n}\n.app .itemParent .Grid .rows .icon-container.progress-bar {\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 0px 0px 0px 0px;\n  height: 100%;\n  width: 0px;\n  display: flex;\n  background-color: #ef4444; /* สีพื้นหลังของ progress bar */\n  transition: width 3s linear; /* เลื่อนจากซ้ายไปขวาในเวลา 3 วินาที */\n}\n.app .itemParent .Grid .rows .icon-container.move {\n  border-right: 1px solid #ccc;\n  padding-right: 10px;\n}\n.app .itemParent .Grid .rows .icon-container.move.enable .iconMove {\n  color: #3b82f6;\n  font-size: 20px;\n  cursor: pointer;\n}\n.app .itemParent .Grid .rows .icon-container.move.disable .iconMove {\n  color: #e6e6e6;\n  font-size: 20px;\n}\n.app .itemParent .Grid .rows .icon-container.right {\n  border-left: 1px solid #ccc;\n  padding-left: 10px;\n}\n.app .itemParent .Grid .rows .icon-container.right.enable .iconDelete {\n  color: #ef4444;\n  font-size: 20px;\n  cursor: pointer;\n}\n.app .itemParent .Grid .rows .icon-container.right.enable .iconAdd {\n  color: #3b82f6;\n  font-size: 20px;\n  cursor: pointer;\n}\n.app .itemParent .Grid .rows .icon-container.right.disable {\n  pointer-events: none;\n}\n.app .itemParent .Grid .rows .icon-container.right.disable .iconDelete {\n  color: #e6e6e6;\n  font-size: 20px;\n}\n.app .itemParent .Grid .rows .icon-container.right.disable .iconAdd {\n  color: #e6e6e6;\n  font-size: 20px;\n}\n.app .itemParent .Grid .rows .icon-container.right:hover {\n  background-color: #e6e6e6;\n}\n.app .controlButtonContainer {\n  align-self: end;\n  justify-content: end;\n  align-item: center;\n  flex-direction: row;\n  display: flex;\n  width: 100%;\n  padding: 15px;\n  gap: 60px;\n  border-width: 1px 0px 0px 0px;\n  border-color: #e6e6e6;\n  border-style: solid;\n}\n.app .controlButtonContainer Button {\n  width: 120px;\n  font-size: 16px;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useRef, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Card, Input, Button } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nimport { AiOutlineColumnHeight, AiOutlineDelete, AiOutlinePlusCircle } from 'https://cdn.jsdelivr.net/npm/react-icons@4.0.0/ai/+esm';\nfunction App() {\n  const [items, setItems] = useState((appsmith.model.data ? appsmith.model.data : []).map(item => ({\n    ...item,\n    ref: React.createRef(),\n    deleteCountdown: {\n      ref: React.createRef(),\n      timeout: null,\n      started: false\n    }\n  })));\n  const [currentModel, setCurrentModel] = useState(appsmith.model.data ? appsmith.model.data : []);\n  const [newItemLabel, setNewItemLabel] = useState(\"\");\n  const [newItemValue, setNewItemValue] = useState(\"\");\n  const [onCountdown, setOnCountdown] = useState(false);\n  const parentItems = useRef(null);\n  const [canDrag, setCanDrag] = useState(false);\n  const [draggingIndex, setDraggingIndex] = useState(null);\n  useEffect(() => {\n    // ตัวอย่างการเรียกใช้งาน handleScrollToElement เมื่อ component ถูก mount\n    //handleScrollToElement(0); // เลื่อนไปที่ element แรก\n  }, [items, onCountdown]);\n  const handleMouseDown = event => {\n    if (event.target.closest('.icon-container.move')) {\n      setCanDrag(true);\n    }\n  };\n  const unlisten = appsmith.onModelChange(newModel => {\n    if (newModel.data && items) {\n      /*if(JSON.stringify(newModel.data.map((ele)=>ele.MASTER_LIST_ID))!=\n      JSON.stringify(items.map((ele)=>ele.MASTER_LIST_ID)) ){\n      setItems((newModel.data || []).map((item)=>({...item,ref:React.createRef(),deleteCountdown:{ref: React.createRef(),timeout:null,started:false}})));\n      }*/\n      if (JSON.stringify(newModel.data) !== JSON.stringify(currentModel)) {\n        setCurrentModel(newModel.data);\n        setItems((newModel.data || []).map(item => ({\n          ...item,\n          ref: React.createRef(),\n          deleteCountdown: {\n            ref: React.createRef(),\n            timeout: null,\n            started: false\n          }\n        })));\n      }\n    }\n  });\n  const handleChange = (index, field, newValue) => {\n    const updatedItems = items.map((item, i) => i === index ? {\n      ...item,\n      [field]: newValue\n    } : item);\n    setItems(updatedItems);\n  };\n  const onSaveClick = async event => {\n    let label = {};\n    let value = {};\n    const output = await Promise.all(items.map(async (ele, index) => {\n      let errorMessage = \"\";\n      if (label[ele.label.toString()] === undefined && value[ele.value.toString()] === undefined) {\n        label[ele.label.toString()] = ele.label;\n        value[ele.value.toString()] = ele.value;\n        if (ele.label.toString().trim() !== \"\" && ele.value.toString().trim() !== \"\") {\n          return {\n            MASTER_LIST_ID: ele.MASTER_LIST_ID,\n            label: ele.label,\n            value: ele.value\n          };\n        } else errorMessage = \"Field is empty.\";\n      } else errorMessage = \"Duplicate field found.\";\n      return {\n        invalid: index,\n        errorMessage: errorMessage\n      };\n    }));\n    if (output.filter(ele => ele.invalid !== undefined).length === 0) {\n      appsmith.triggerEvent(\"onSave\", {\n        items: output\n      });\n    } else {\n      output.filter(ele => ele.invalid !== undefined).map(alertRow => {\n        rowAlert(alertRow.invalid, alertRow.errorMessage);\n      });\n    }\n  };\n  const onResetClick = () => {\n    setItems((appsmith.model.data || []).map(item => ({\n      ...item,\n      ref: React.createRef(),\n      deleteCountdown: {\n        ref: React.createRef(),\n        timeout: null,\n        started: false\n      }\n    })));\n  };\n  const resetWidth = ref => {\n    if (ref.current) {\n      // Temporarily disable transition\n      ref.current.style.transition = 'none';\n      ref.current.style.width = '0';\n\n      // Force reflow to apply the width change immediately\n      ref.current.offsetHeight;\n\n      // Re-enable transition\n      ref.current.style.transition = '';\n    }\n  };\n  const handleDelete = index => {\n    const updatedItems = items.map((item, i) => {\n      if (i === index) {\n        if (item.deleteCountdown.started) {\n          //cancel\n          clearTimeout(item.deleteCountdown.timeout);\n          setOnCountdown(false);\n          resetWidth(item.deleteCountdown.ref);\n          //item.deleteCountdown.ref.current = item.deleteCountdown.backupRef\n          return {\n            ...item,\n            deleteCountdown: {\n              ref: item.deleteCountdown.ref,\n              timeout: null,\n              started: false\n            }\n          };\n        } else if (!onCountdown) {\n          //start Countdown\n\n          if (item.deleteCountdown.ref.current) {\n            item.deleteCountdown.ref.current.style.width = '100%';\n          }\n          const countdown = setTimeout(() => {\n            //delete\n            const updatedItems = items.filter((_, i) => i !== index);\n            setItems(updatedItems);\n            updatedItems.map((resetItem, i) => {\n              if (i === index) resetWidth(resetItem.deleteCountdown.ref);\n            });\n            setOnCountdown(false);\n          }, 3000);\n          setOnCountdown(true);\n          return {\n            ...item,\n            deleteCountdown: {\n              ref: item.deleteCountdown.ref,\n              timeout: countdown,\n              started: true\n            }\n          };\n        }\n      }\n      return item;\n    });\n    setItems(updatedItems);\n  };\n  const handleDragStart = (event, index) => {\n    if (!canDrag || onCountdown) {\n      event.preventDefault();\n      return;\n    }\n    setDraggingIndex(index);\n    setCanDrag(false); // Reset หลังจากเริ่มลาก\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = index => {\n    if (draggingIndex === null || draggingIndex === index) return;\n    const updatedItems = [...items];\n    const [draggedItem] = updatedItems.splice(draggingIndex, 1);\n    updatedItems.splice(index, 0, draggedItem);\n    setItems(updatedItems);\n    setDraggingIndex(null);\n  };\n  const rowAlert = (rowIndex, alertText) => {\n    const lastChange = items;\n    appsmith.triggerEvent(\"onAlert\", {\n      text: alertText.toString()\n    });\n    const updatedItems = items.map((item, index) => {\n      if (index === rowIndex) {\n        item.ref.current.scrollIntoView({\n          behavior: 'instant',\n          block: 'center'\n        });\n        return {\n          ...item,\n          isShake: true\n        };\n      } else return item;\n    });\n    setItems(updatedItems);\n    setTimeout(() => setItems(lastChange), 500);\n  };\n  const handleNewRow = () => {\n    if (items.filter(ele => ele.label.toString().trim() == newItemLabel.toString().trim()).length > 0 || items.filter(ele => ele.value.toString().trim() == newItemValue.toString().trim()).length > 0) {\n      const updatedItems = items.map((item, index) => {\n        if (item.label.toString().trim() == newItemLabel.toString().trim() || item.value.toString().trim() == newItemValue.toString().trim()) {\n          rowAlert(index, \"Duplicate value found.\");\n        }\n      });\n      return;\n    }\n    if (newItemLabel.toString().trim() === \"\" || newItemValue.toString().trim() === \"\") {\n      return;\n    }\n    const updatedItems = [...items, {\n      label: newItemLabel,\n      value: newItemValue,\n      MASTER_LIST_ID: \"\",\n      ref: React.createRef(),\n      deleteCountdown: {\n        ref: React.createRef(),\n        timeout: null,\n        started: false\n      }\n    }];\n    setNewItemLabel(\"\");\n    setNewItemValue(\"\");\n    setItems(updatedItems);\n    if (parentItems.current) {\n      const container = parentItems.current;\n      container.scrollTo({\n        top: container.scrollHeight,\n        behavior: \"smooth\"\n      });\n    }\n    //refs.current =refs.current.push(React.createRef());\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\"\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"itemParent\",\n    ref: parentItems\n  }, /*#__PURE__*/React.createElement(Card.Grid, {\n    className: \"Grid\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rows\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"icon-container move\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group\"\n  }, /*#__PURE__*/React.createElement(\"label\", null, \"FIX_VALUE\"), /*#__PURE__*/React.createElement(Input, {\n    value: newItemLabel,\n    onChange: e => setNewItemLabel(e.target.value)\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group\"\n  }, /*#__PURE__*/React.createElement(\"label\", null, \"SYSTEM_VALUE\"), /*#__PURE__*/React.createElement(Input, {\n    value: newItemValue,\n    onChange: e => setNewItemValue(e.target.value)\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: `icon-container right ${onCountdown ? \"disable\" : \"enable\"}`,\n    onClick: () => handleNewRow()\n  }, \"Add\"))), items.map((item, index) => /*#__PURE__*/React.createElement(Card.Grid, {\n    className: `Grid ${item.isShake ? \"shake\" : \"\"}`,\n    key: index,\n    draggable: canDrag,\n    onMouseDown: handleMouseDown,\n    onMouseUp: () => setCanDrag(false),\n    onDragStart: event => handleDragStart(event, index),\n    onDragOver: handleDragOver,\n    onDrop: () => handleDrop(index)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rows\",\n    ref: item.ref\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `icon-container move ${onCountdown ? \"disable\" : \"enable\"}`\n  }, \". . .\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group\"\n  }, /*#__PURE__*/React.createElement(\"label\", null, \"FIX_VALUE\"), /*#__PURE__*/React.createElement(Input, {\n    value: item.label,\n    onChange: e => handleChange(index, 'label', e.target.value)\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group\"\n  }, /*#__PURE__*/React.createElement(\"label\", null, \"SYSTEM_VALUE\"), /*#__PURE__*/React.createElement(Input, {\n    value: item.value,\n    onChange: e => handleChange(index, 'value', e.target.value)\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: `icon-container right ${onCountdown && !item.deleteCountdown.started ? \"disable\" : \"enable\"}`,\n    onClick: () => handleDelete(index)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"icon-container progress-bar\",\n    ref: item.deleteCountdown.ref\n  }), \"x\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"controlButtonContainer\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: onResetClick\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: onSaveClick\n  }, \"Save\")));\n}\nappsmith.onReady(() => {\n  reactDom.render(/*#__PURE__*/React.createElement(App, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 20,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "@keyframes shake {\n\t0% { transform: translateX(0); }\n\t25% { transform: translateX(-5px); }\n\t50% { transform: translateX(5px); }\n\t75% { transform: translateX(-5px); }\n\t100% { transform: translateX(0); }\n}\n\n.app {\n\twidth: calc(1px * var(--appsmith-ui-width) - 12px);\n\tjustify-content: space-between;\n\tborder-radius: 0px;\n\tborder-width: none;\n\tpadding: 5px;\n\theight: calc(1px * var(--appsmith-ui-height) - 12px );\n\tdisplay:flex;\n\tflex-direction:column;\n\toverflow-x: hidden;\n\n\t.itemParent{\n\t\tborder-width: 0px;\n\t\tflex-direction:column;\n\t\toverflow:auto;\n\t\theight: 100%;\n\t\tpadding: 0px 15px 60px 15px;\n\t\t.shake{\n\t\t\t\tanimation: shake 0.5s;\n\t\t}\n\t\t.Grid{\n\t\t\twidth: 100%; \n\t\t\theight: 45px;\n\t\t\tpadding: 0px;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tdisplay: flex;\n\t\t\tmargin-top:5px;\n\t\t\tborder-radius: 5px;\n\t\t\t\n\t\t\t.rows {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: row;\n\t\t\t\twidth: 100%;\n\t\t\t\talign-items: center;\n\t\t\t\tgap: 20px;\n\t\t\t\theight:100%;\n\t\t\t\t\n\n\t\t\t\t.input-group {\n\t\t\t\t\tflex: 1;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tgap: 10px;\n\t\t\t\t}\t\t\n\t\t\t\t.icon-container {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tmin-height: 30px;\n\t\t\t\t\twidth: 20px;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tpadding-left: 10px;\n\t\t\t\t\tpadding-right: 10px;\n\t\t\t\t\tposition: relative;\n\t\t\t\t\t/*cursor: pointer;*/\n\t\t\t\t}\n\t\t\t\t.icon-container.progress-bar {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tleft: 0;\n\t\t\t\t\tpadding:0px 0px 0px 0px;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\twidth: 0px;\n\t\t\t\t\tdisplay:flex;\n\t\t\t\t\tbackground-color: #ef4444; /* สีพื้นหลังของ progress bar */\t\t\t\n\t\t\t\t\ttransition: width 3s linear; /* เลื่อนจากซ้ายไปขวาในเวลา 3 วินาที */\n\t\t\t\t}\n\t\t\t\t.icon-container.move {\n\t\t\t\t\tborder-right: 1px solid #ccc;\n\t\t\t\t\tpadding-right: 10px;\n\n\t\t\t\t}\n\t\t\t\t.icon-container.move.enable {\n\t\t\t\t\t.iconMove{\n\t\t\t\t\t\tcolor:#3b82f6;\n\t\t\t\t\t\tfont-size: 20px;\n\t\t\t\t\t\tcursor: pointer; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.icon-container.move.disable {\n\t\t\t\t\t.iconMove{\n\t\t\t\t\t\tcolor:#e6e6e6;\n\t\t\t\t\t\tfont-size: 20px;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.icon-container.right{\n\t\t\t\t\tborder-left: 1px solid #ccc;\n\t\t\t\t\tpadding-left: 10px;\n\t\t\t\t}\n\t\t\t\t.icon-container.right.enable{\n\t\t\t\t\t.iconDelete{\n\t\t\t\t\t\tcolor:#ef4444;\n\t\t\t\t\t\tfont-size: 20px;\n\t\t\t\t\t\tcursor: pointer; \n\t\t\t\t\t}\n\t\t\t\t\t.iconAdd{\n\t\t\t\t\t\tcolor:#3b82f6; \n\t\t\t\t\t\tfont-size: 20px; \n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.icon-container.right.disable{\n\t\t\t\t\tpointer-events: none;\n\t\t\t\t\t.iconDelete{\n\t\t\t\t\t\tcolor:#e6e6e6;\n\t\t\t\t\t\tfont-size: 20px;\n\t\t\t\t\t}\n\t\t\t\t\t.iconAdd{\n\t\t\t\t\t\tcolor:#e6e6e6; \n\t\t\t\t\t\tfont-size: 20px; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.icon-container.right:hover {\n\t\t\t\t\tbackground-color: #e6e6e6;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\t.controlButtonContainer{\n\t\talign-self: end;\n\t\tjustify-content: end;\n\t\talign-item: center;\n\t\tflex-direction: row;\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t\tpadding: 15px;\n\t\tgap: 60px;\n\t\tborder-width: 1px 0px 0px 0px;\n\t\tborder-color: #e6e6e6;\n\t\tborder-style: solid;\n\t\tButton{\n\t\t\twidth: 120px;\n\t\t\tfont-size: 16px;\n\t\t}\n\t}\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n\n<div id=\"root\"></div>\n",
    "js": "import React, { useState , useRef ,useEffect} from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Card, Input ,Button } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nimport { AiOutlineColumnHeight, AiOutlineDelete,AiOutlinePlusCircle } from 'https://cdn.jsdelivr.net/npm/react-icons@4.0.0/ai/+esm';\n\nfunction App() {\n\tconst [items, setItems] = useState((appsmith.model.data?appsmith.model.data:[]).map((item)=>({...item,ref:React.createRef(),deleteCountdown:{ref: React.createRef(),timeout:null,started:false}})));\n\tconst [currentModel,setCurrentModel] = useState(appsmith.model.data?appsmith.model.data:[]);\n\t\n\tconst [newItemLabel, setNewItemLabel] = useState(\"\");\n\tconst [newItemValue, setNewItemValue] = useState(\"\");\n\tconst [onCountdown, setOnCountdown] = useState(false);\n\tconst parentItems= useRef(null);\n\tconst [canDrag, setCanDrag] = useState(false);\n\tconst [draggingIndex, setDraggingIndex] = useState(null);\n\tuseEffect(() => {\n    // ตัวอย่างการเรียกใช้งาน handleScrollToElement เมื่อ component ถูก mount\n    //handleScrollToElement(0); // เลื่อนไปที่ element แรก\n  }, [items,onCountdown]);\t\t\n\tconst handleMouseDown = (event) => {\n\t\tif (event.target.closest('.icon-container.move')) {\n\t\t\tsetCanDrag(true);\n\t\t}\n\t};\n\nconst unlisten = appsmith.onModelChange((newModel) => {\n  \n  if (newModel.data&&items) {\n    /*if(JSON.stringify(newModel.data.map((ele)=>ele.MASTER_LIST_ID))!=\n\t\t\t JSON.stringify(items.map((ele)=>ele.MASTER_LIST_ID)) ){\n\t\t\t\tsetItems((newModel.data || []).map((item)=>({...item,ref:React.createRef(),deleteCountdown:{ref: React.createRef(),timeout:null,started:false}})));\n\t\t}*/\n\t\tif(JSON.stringify( newModel.data)!== JSON.stringify(currentModel)){\n\t\t\tsetCurrentModel(newModel.data);\n\t\t\tsetItems((newModel.data || []).map((item)=>({...item,ref:React.createRef(),deleteCountdown:{ref: React.createRef(),timeout:null,started:false}})));\n\t\t}\n  }\n});\n\tconst handleChange = (index, field, newValue) => {\n\t\tconst updatedItems = items.map((item, i) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t i === index ? { ...item, [field]: newValue } : item\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\tsetItems(updatedItems);\n\t};\n\n\tconst onSaveClick =async (event)=>{\n\t\tlet label = {};\n\t\tlet value = {};\n\t\tconst output = await Promise.all( items.map(async (ele,index)=>{\n\t\t\tlet errorMessage = \"\"\n\t\t\tif(label[ele.label.toString()] === undefined && value[ele.value.toString()] === undefined){\n\t\t\t\tlabel[ele.label.toString()] = ele.label;\n\t\t\t\tvalue[ele.value.toString()] = ele.value;\n\t\t\t\tif(ele.label.toString().trim()!==\"\" && ele.value.toString().trim()!==\"\"){\n\t\t\t\t\treturn ({MASTER_LIST_ID:ele.MASTER_LIST_ID,label:ele.label,value:ele.value})\n\t\t\t\t}else errorMessage = \"Field is empty.\"\n\t\t\t}else errorMessage = \"Duplicate field found.\"\n\t\t\t\n\t\t\treturn {invalid:index,errorMessage:errorMessage};\n\t\t}));\n\t\tif(output.filter((ele)=>ele.invalid!==undefined).length===0){\n\t\t\tappsmith.triggerEvent(\"onSave\", { items: output});\n\t\t}else{\n\t\t\toutput.filter((ele)=>ele.invalid!==undefined).map((alertRow)=>{\n\t\t\t\trowAlert(alertRow.invalid,alertRow.errorMessage);\n\t\t\t})\n\t\t}\n\t};\n\n\t\n\tconst onResetClick = ()=>{\n\t\tsetItems((appsmith.model.data || []).map((item)=>({...item,ref:React.createRef(),deleteCountdown:{ref: React.createRef(),timeout:null,started:false}})));\n\t}\n\n\t\n\tconst resetWidth = (ref) => {\n    if (ref.current) {\n        // Temporarily disable transition\n        ref.current.style.transition = 'none';\n        ref.current.style.width = '0';\n\n        // Force reflow to apply the width change immediately\n        ref.current.offsetHeight;\n\n        // Re-enable transition\n        ref.current.style.transition = '';\n    }\n\t}\n\n\tconst handleDelete = (index) => {\n\t\t\n\t\tconst updatedItems = items.map((item, i) =>{\n\t\t\tif(i === index){\n\t\t\t\tif(item.deleteCountdown.started){\n\t\t\t\t\t//cancel\n\t\t\t\t\tclearTimeout(item.deleteCountdown.timeout);\n\t\t\t\t\tsetOnCountdown(false);\n\t\t\t\t\tresetWidth(item.deleteCountdown.ref);\n\t\t\t\t\t//item.deleteCountdown.ref.current = item.deleteCountdown.backupRef\n\t\t\t\t\treturn { ...item,\n\t\t\t\t\t\t\t\t deleteCountdown:\n\t\t\t\t\t\t\t\t {ref:item.deleteCountdown.ref,timeout:null,started:false}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}else if(!onCountdown){\n\t\t\t\t\t//start Countdown\n\n\t\t\t\t\tif (item.deleteCountdown.ref.current) {\n\t\t\t\t\t\titem.deleteCountdown.ref.current.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t\tconst countdown = setTimeout(()=>{\n\t\t\t\t\t\t//delete\n\t\t\t\t\t\tconst updatedItems = items.filter((_, i) => i !== index)\n\t\t\t\t\t\t\n\t\t\t\t\t\tsetItems(updatedItems);\n\t\t\t\t\t\tupdatedItems.map((resetItem,i)=>{\n\t\t\t\t\t\t\tif(i===index)resetWidth(resetItem.deleteCountdown.ref);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsetOnCountdown(false);\n\t\t\t\t\t},3000);\n\t\t\t\t\tsetOnCountdown(true);\n\t\t\t\t\treturn\t{ ...item,\n\t\t\t\t\t\t\t\t deleteCountdown:\n\t\t\t\t\t\t\t\t {ref:item.deleteCountdown.ref,timeout:countdown,started:true}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\treturn item;\n\t\t\t\n\t\t});\n\t\tsetItems(updatedItems);\n\n\t};\n\n\tconst handleDragStart = (event, index) => {\n\t\tif (!canDrag||onCountdown) {\n\t\t\tevent.preventDefault();\n\t\t\treturn;\n\t\t}\n\t\tsetDraggingIndex(index);\n\t\tsetCanDrag(false); // Reset หลังจากเริ่มลาก\n\t};\n\n\tconst handleDragOver = (event) => {\n\t\tevent.preventDefault();\n\t};\n\t\n\tconst handleDrop = (index) => {\n\t\tif (draggingIndex === null || draggingIndex === index) return;\n\t\tconst updatedItems = [...items];\n\t\tconst [draggedItem] = updatedItems.splice(draggingIndex, 1);\n\t\tupdatedItems.splice(index, 0, draggedItem);\n\t\tsetItems(updatedItems);\n\t\tsetDraggingIndex(null);\n\t};\t\n\t\n\tconst rowAlert = (rowIndex,alertText)=>{\n\t\tconst lastChange = items;\n\t\tappsmith.triggerEvent(\"onAlert\", { text: alertText.toString()});\n\t\t\tconst updatedItems = items.map((item, index) => {\n\t\t\t\tif(index===rowIndex){\n\t\t\t\t\titem.ref.current.scrollIntoView({ behavior: 'instant', block: 'center' });\n\t\t\t\t\treturn { ...item, isShake: true}\n\t\t\t\t}\n\t\t\t\telse return item;\n\t\t\t});\n\n\t\t\tsetItems(updatedItems);\n\t\t\tsetTimeout(()=>setItems(lastChange),500);\n\t}\n\t\n\tconst handleNewRow = ()=>{\n\t\tif(items.filter((ele)=>ele.label.toString().trim()==newItemLabel.toString().trim()).length>0 ||\n\t\t\t items.filter((ele)=>ele.value.toString().trim()==newItemValue.toString().trim()).length>0 ){\n\t\t\tconst updatedItems = items.map((item, index) => {\n\t\t\t\tif(item.label.toString().trim()==newItemLabel.toString().trim()||\n\t\t\t\t\titem.value.toString().trim()==newItemValue.toString().trim()){\n\t\t\t\t\trowAlert(index,\"Duplicate value found.\");\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif(newItemLabel.toString().trim()===\"\"||newItemValue.toString().trim()===\"\"){\n\t\t\treturn;\n\t\t}\n\t\tconst updatedItems = [...items,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{label: newItemLabel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t value: newItemValue,\n\t\t\t\t\t\t\t\t\t\t\t\t\t MASTER_LIST_ID:\"\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t ref: React.createRef()\n\t\t\t\t\t\t\t\t\t\t\t\t\t ,deleteCountdown:{ref: React.createRef(),timeout:null,started:false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t ];\n\t\tsetNewItemLabel(\"\");\n\t\tsetNewItemValue(\"\");\n\t\tsetItems(updatedItems);\n\t\tif( parentItems.current){\n\t\t\tconst container = parentItems.current;\n\t\t\t container.scrollTo({ top: container.scrollHeight, behavior: \"smooth\" });\n\t\t}\n\t\t//refs.current =refs.current.push(React.createRef());\n\t}\n\n\n\n    return (\n        <div className=\"app\">\n            <Card className=\"itemParent\" ref={parentItems}>\n\t\t\t\t\t\t\t\t<Card.Grid className=\"Grid\" >\n                        <div className=\"rows\">\n                            <div className=\"icon-container move\">\n\n                            </div>\n                            <div className=\"input-group\">\n                                <label>FIX_VALUE</label>\n                                <Input value={newItemLabel} onChange={e => setNewItemLabel(e.target.value)}/>\n                            </div>\n                            <div className=\"input-group\">\n                                <label>SYSTEM_VALUE</label>\n                                <Input value={newItemValue} onChange={e => setNewItemValue(e.target.value)}/>\n                            </div>\n                            <div className={`icon-container right ${onCountdown?\"disable\":\"enable\"}`} onClick={() => handleNewRow()}>\n                                Add\n                            </div>\n                        </div>\n                </Card.Grid>\t\t\t\t\t\t\t\n                {items.map((item, index) => (\n                    <Card.Grid \n\t\t\t\t\t\t\t\t\tclassName={ `Grid ${item.isShake ? \"shake\" : \"\"}`} \n\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\tdraggable={canDrag}  \n\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={handleMouseDown}\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseUp = {()=>setCanDrag(false)}\n\t\t\t\t\t\t\t\t\t\t\t\tonDragStart={(event) => handleDragStart(event, index)} \n\t\t\t\t\t\t\t\t\t\t\t\tonDragOver={handleDragOver} \n\t\t\t\t\t\t\t\t\t\t\t\tonDrop={() => handleDrop(index)} \n\t\t\t\t\t\t\t\t\t\t>\n                        <div className=\"rows\" ref={item.ref}>\n                            <div className={`icon-container move ${onCountdown?\"disable\":\"enable\"}`}>\n                                . . .\n                            </div>\n                            <div className=\"input-group\">\n                                <label>FIX_VALUE</label>\n                                <Input  value={item.label} onChange={e => handleChange(index, 'label', e.target.value)} />\n                            </div>\n                            <div className=\"input-group\">\n                                <label>SYSTEM_VALUE</label>\n                                <Input value={item.value} onChange={e => handleChange(index, 'value', e.target.value)} />\n                            </div>\n                            <div  className={`icon-container right ${onCountdown&&!item.deleteCountdown.started?\"disable\":\"enable\"}`} onClick={() => handleDelete(index)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"icon-container progress-bar\" ref={item.deleteCountdown.ref}></div>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                x\n\n                            </div>\n                        </div>\n                    </Card.Grid>\n                ))}\n\t\n\t\t\t\t\t\t\t\t\n            </Card>\n\t\t\t\t\t\t<div className=\"controlButtonContainer\">\n\t\t\t\t\t\t<Button onClick={onResetClick}>Reset</Button>\n\t\t\t\t\t\t<Button onClick={onSaveClick}>Save</Button>\n\t\t\t\t\t\t\t</div>\n        </div>\n    );\n}\n\n\n\nappsmith.onReady(() => {\n    reactDom.render(<App />, document.getElementById(\"root\"));\n});"
  },
  "version": 1,
  "widgetId": "pjffxpuxjq",
  "widgetName": "Custom1"
}